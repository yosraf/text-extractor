{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/component/ocr/ocr.component.ts","webpack:///src/app/component/ocr/ocr.component.html","webpack:///src/app/component/result/result.component.ts","webpack:///src/app/component/result/result.component.html","webpack:///src/app/service/ocr.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","OcrComponent","service","componentFactoryResolver","file","loading","event","target","files","reader","FileReader","readAsDataURL","onload","extractText","result","toString","subscribe","res","text","resolver","resolveComponentFactory","resultComp","createComponent","instance","data","read","ResultComponent","OcrService","http","image","post","baseUrl","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'text-extractor';\n}\n","<div class=\"container\">\n    <app-ocr></app-ocr>\n  </div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { OcrComponent } from './component/ocr/ocr.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ResultComponent } from './component/result/result.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    OcrComponent,\n    ResultComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\nimport { OcrService } from 'src/app/service/ocr.service';\nimport { ResultComponent } from '../result/result.component';\n\n@Component({\n  selector: 'app-ocr',\n  templateUrl: './ocr.component.html',\n  styleUrls: ['./ocr.component.scss']\n})\nexport class OcrComponent implements OnInit {\n  file: File = null;\n  loading = false;\n  text: string;\n  @ViewChild(\"result\", { read: ViewContainerRef })\n  result: ViewContainerRef;\n  constructor(private service: OcrService, private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit(): void {\n  }\n  onChange(event) {\n    this.loading = true;\n    this.file = event.target.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(this.file);\n    reader.onload = () => {\n      this.service.extractText(reader.result.toString()).subscribe((res: Object) => {\n        this.loading = false;\n        if (res[\"OCRExitCode\"] === 1) {\n          this.text = res['ParsedResults'][0][\"ParsedText\"];\n          let resolver = this.componentFactoryResolver.resolveComponentFactory(ResultComponent);\n          const resultComp = this.result.createComponent(resolver).instance;\n          resultComp.text = this.text;\n          resultComp.data = reader.result.toString();\n        }\n\n      });\n    };\n  }\n\n\n}\n","<div class=\"text-center loader\" *ngIf=\"loading\">\n  <div class=\"spinner-border text-info\" role=\"status\">\n    <span class=\"sr-only\">Loading...</span>\n  </div>\n</div>\n<div *ngIf=\"!loading\">\n  <h3 class=\"text-info\">Extract text from image</h3>\n  <div class=\"custom-file\">\n    <input type=\"file\" class=\"custom-file-input\" (change)=\"onChange($event)\" accept=\"image/jpeg, image/png\">\n    <label class=\"custom-file-label\">Choose file</label>\n  </div>\n\n</div>\n<div #result class=\"result\">\n</div>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-result',\n  templateUrl: './result.component.html',\n  styleUrls: ['./result.component.scss']\n})\nexport class ResultComponent implements OnInit {\n\n  @Input(\"text\")\n  text:string;\n  @Input(\"data\")\n  data:string;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card\">\n    <h5 class=\"card-header\">Extracted text</h5>\n    <img class=\"card-img-top\" [src]=\"data\" >\n    <div class=\"card-body\">\n      <p class=\"card-text\">{{text}}</p>\n    </div>\n  </div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OcrService {\n\n  constructor(private http:HttpClient) { }\n\n  public  extractText(image:string): Observable<Object>{\n    return this.http.post<Object>(environment.baseUrl + 'ocr/convert',image);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  baseUrl:'http://localhost:8080/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}